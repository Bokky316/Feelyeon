# Spring Application \uAE30\uBCF8 \uC124\uC815
spring.application.name=feelyeon
server.port=8080

# \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC815\uBCF4
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://localhost:3306/Feelyeon?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=1234

# JPA \uC124\uC815
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# SQL \uCFFC\uB9AC \uCD9C\uB825
logging.level.jdbc.sqlonly=debug
# SQL \uC2E4\uD589 \uC2DC\uAC04 \uCD9C\uB825
logging.level.jdbc.sqltiming=off
# ResultSet \uCD9C\uB825 \uBE44\uD65C\uC131\uD654
logging.level.jdbc.resultset=off
# \uAC10\uC0AC \uB85C\uADF8 \uBE44\uD65C\uC131\uD654
logging.level.jdbc.audit=off
# Connection \uB85C\uADF8 \uBE44\uD65C\uC131\uD654
logging.level.jdbc.connection=off

# Hibernate SQL \uB85C\uADF8 \uC124\uC815 (log4jdbc \uC0AC\uC6A9\uC73C\uB85C \uC778\uD574 \uBD88\uD544\uC694\uD558\uC5EC \uBE44\uD65C\uC131\uD654)
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=false
logging.level.org.hibernate.type.descriptor.sql=off

# Thymeleaf \uC124\uC815
# Thymeleaf \uCE90\uC2DC \uBE44\uD65C\uC131\uD654
spring.thymeleaf.cache=false

# DevTools \uC124\uC815
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

# \uB85C\uADF8 \uB808\uBCA8 \uC124\uC815
# \uB8E8\uD2B8 \uB808\uBCA8 \uB85C\uADF8 \uC124\uC815
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.web=DEBUG
# \uC2DC\uD050\uB9AC\uD2F0 \uB85C\uADF8, \uC2DC\uD050\uB9AC\uD2F0 \uB514\uBC84\uAE45\uC2DC \uC0AC\uC6A9
logging.level.org.springframework.security=DEBUG
logging.level.com.javalab.shop=DEBUG

# log display format
logging.pattern.level=%highlight(%-5level)
spring.output.ansi.enabled=ALWAYS

# \uC0C1\uD488 \uC774\uBBF8\uC9C0 \uC5C5\uB85C\uB4DC \uACBD\uB85C, \uC774 \uAC12\uC740 \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC5D0\uC11C \uC0C1\uD488 \uC774\uBBF8\uC9C0\uB97C \uC800\uC7A5\uD558\uAC70\uB098 \uC77D\uC5B4\uC62C \uB54C \uCC38\uC870\uD558\uB294 \uACBD\uB85C
# Windows\uC758 \uB85C\uCEEC \uD30C\uC77C \uC2DC\uC2A4\uD15C \uACBD\uB85C\uB85C, C \uB4DC\uB77C\uC774\uBE0C\uC758 shop \uB514\uB809\uD130\uB9AC \uB0B4 item \uD558\uC704 \uB514\uB809\uD130\uB9AC\uB97C \uAC00\uB9AC\uD0B5\uB2C8\uB2E4.
# \uC0C1\uD488 \uB4F1\uB85D \uC2DC \uC774\uBBF8\uC9C0\uB97C \uD574\uB2F9 \uACBD\uB85C\uC5D0 \uC800\uC7A5\uD558\uAC70\uB098, \uD504\uB860\uD2B8\uC5D4\uB4DC\uC5D0 \uD45C\uC2DC\uD560 \uC774\uBBF8\uC9C0\uB97C \uD574\uB2F9 \uACBD\uB85C\uC5D0\uC11C \uB85C\uB4DC.
itemImgLocation=c:/shop/item
# \uB9AC\uC18C\uC2A4(\uC774\uBBF8\uC9C0/\uD30C\uC77C \uB4F1)\uB97C \uC6F9 \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC5D0\uC11C \uC811\uADFC \uAC00\uB2A5\uD558\uB3C4\uB85D \uC81C\uACF5\uD558\uB294 URL \uAE30\uBC18 \uACBD\uB85C
# \uD0C0\uC784\uB9AC\uD504\uB098 \uD504\uB860\uD2B8\uC5D4\uB4DC\uC5D0\uC11C \uC774\uBBF8\uC9C0\uB97C \uB85C\uB4DC\uD560 \uB54C URL\uC744 \uD1B5\uD574 \uD30C\uC77C\uC744 \uCC38\uC870.
uploadPath=file:///c:/shop/

spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=20MB

#com.javalab.boot.upload.path=C:\\upload
# \uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC \uB418\uC5B4 \uC788\uB294 \uACBD\uB85C

# \uAE30\uBCF8 batch size \uC124\uC815, \uC8FC\uBB38\uC774 5\uAC74\uC774\uBA74 \uC77C\uBC18\uC801\uC73C\uB85C 5\uBC88\uC758 \uC8FC\uBB38 \uC544\uC774\uD15C\uC5D0 \uB300\uD55C \uC870\uD68C \uCFFC\uB9AC\uAC00 \uBC1C\uC0DD\uD569\uB2C8\uB2E4.
# \uC774\uB54C batch size\uB97C 1000\uC73C\uB85C \uC124\uC815\uD558\uBA74 5\uBC88\uC758 \uC870\uD68C \uCFFC\uB9AC \uB300\uC2E0 1\uBC88\uC758 \uC870\uD68C \uCFFC\uB9AC\uB85C \uCC98\uB9AC\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.
# \uC774\uB807\uAC8C \uC124\uC815\uD558\uBA74 \uC131\uB2A5\uC774 \uD5A5\uC0C1\uB429\uB2C8\uB2E4. \uC608\uB97C\uB4E4\uBA74 in \uCFFC\uB9AC\uB85C \uCC98\uB9AC\uB429\uB2C8\uB2E4. in (1,2,3,4,5)
spring.jpa.properties.hibernate.default_batch_fetch_size=10



## kakao social login 사용자를 카카오 인증 서버로 리다이렉트하기 위한 초기 단계를 구성 ##
# 1. 사용자가 우리 로그인 페이지에서 <a href="/oauth2/authorization/kakao">KAKAO</a> 클릭
# 2. 스프링 시큐리티 OAuth2 가 1.번 요청을 가로채서 사용자를 카카오의 인증 URI로 설정된
#   https://kauth.kakao.com/oauth/authorize로 리디렉트 시킨다.
# 3. 카카오는 다시 사용자의 카카오 소셜 로그인 인증 여부에 따라서 사용자를
#    https://accounts.kakao.com/login 페이지로 리디렉트 시킨다. 만약 카카오 소셜로그인 인증이
#    이미 있는 경우에는 바로 인가코드를 우리 서버로 전달한다.
# 4. 사용자가 카카오 소셜로그인 화면에서 아이디와 비밀번호를 입력하고 로그인 버튼을 누르면
#   우리 서버와 카카오 서버간의 인증 절차가 시작된다.
# 4.1. 카카오 인증 서버는 우리 앱에 설정한 client-id를 확인하고 인가코드를 전달해준다.
#   인가코드는 우리가 설정해놓은 Redirect Url(http://localhost:8080/login/oauth2/code/kakao)로 전달된다.
# 4.2. 4.1.에서 받은 인가코드와 우리가 설정해놓은 client-secret 키를 카카오의 인증서버인
#   https://kauth.kakao.com/oauth/token 에 액세스 토큰을 요청하고 카카오 인증 서버가 액세스 토큰을 반환.
# 5. Spring Security가 액세스 토큰을 사용해 https://kapi.kakao.com/v2/user/me에서 사용자 정보를 요청.
# 6. 사용자 정보를 가져와 인증 객체 생성 및 스프링 컨텍스트에 저장.
# 7. 사용자가 로그인 후 리디렉션 설정에 따라 적절한 페이지로 이동
# 카카오는 스프링 시큐리티에게 인증 코드를 전달한다.
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

## 카카오 소셜 로그인
# 1. 소셜 로그인 로컬 서버 - 로그인 성공후 "인가코드"가 리디렉션될 주소(카카오 소셜 로그인을 로컬에서 사용)
spring.security.oauth2.client.registration.kakao.redirect_uri=http://localhost:8080/login/oauth2/code/kakao
# 2. 소셜 로그인(클라우드타입 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=https://port-0-chap10-shopping-static-7xwyjq992lliwmu004.sel4.cloudtype.app/login/oauth2/code/kakao
#3. 소셜 로그인(AWS 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=http://ec2-54-219-185-240.us-west-1.compute.amazonaws.com:8080/login/oauth2/code/kakao

# REST API 키(인가 코드 발급시 필요)
spring.security.oauth2.client.registration.kakao.client-id=f57be72d3c49af75d43b0fefd1ce8235
# 인가코드와 이 비밀키를 이옹해서 액세스 토큰을 발급받는다. 액세스 토큰이 있어야 카카오 사용자 정보 조회 가능
spring.security.oauth2.client.registration.kakao.client-secret=hn6bBKP7z0MjGFWudXTeHWLbgbMZPc9s
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email